{"ast":null,"code":"var _jsxFileName = \"/Users/colin/Desktop/next/fitness-kaki-front-end/src/components/Upload.js\";\nimport React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport './Upload.css';\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toData = (url, callback) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onload = () => {\n        const reader = new FileReader();\n\n        reader.onloadend = () => {\n          callback(reader.result);\n        };\n\n        reader.readAsDataURL(xhr.response);\n      };\n\n      xhr.open('GET', url);\n      xhr.responseType = 'blob';\n      xhr.send();\n    };\n\n    this.predictImage = e => {\n      let image = '';\n      this.toData(e.target.value, myBase64 => {\n        image = myBase64; // myBase64 is the base64 string\n      });\n      setTimeout(() => {\n        console.log(image.split(',')[1]); // Initialise Clarifai api\n\n        const Clarifai = require('clarifai');\n\n        const app = new Clarifai.App({\n          apiKey: '3136bd99f12649ddb3bbd963c2975804'\n        }); // Identify the image\n\n        app.models.predict(Clarifai.FOOD_MODEL, {\n          base64: image.split(',')[1]\n        }).then(response => // console.log(response.outputs[0].data)\n        this.setState({\n          names: response.outputs[0].data.concepts\n        })).catch(err => console.log(err));\n        this.state.names.map(p => console.log(p.name));\n      }, 1000);\n    };\n\n    this.predictImageFile = f => {\n      let imageFile = document.querySelector(\"input[type=file]\").files[0];\n      this.toDataFromFile(imageFile, myBase64 => {\n        imageFile = myBase64; // myBase64 is the base64 string\n      });\n      setTimeout(() => {\n        console.log(imageFile); // console.log(imageFile.split(',')[1])\n        // Initialise Clarifai api\n\n        const Clarifai = require('clarifai');\n\n        const app = new Clarifai.App({\n          apiKey: '3136bd99f12649ddb3bbd963c2975804'\n        }); // Identify the image\n\n        app.models.predict(Clarifai.FOOD_MODEL, {\n          base64: imageFile.split(',')[1]\n        }).then(response => // console.log(response.outputs[0].data)\n        this.setState({\n          names: response.outputs[0].data.concepts\n        })).catch(err => console.log(err));\n        this.state.names.map(p => console.log(p.name));\n      }, 1000);\n    };\n\n    this.state = {\n      image: null,\n      imageFile: null,\n      names: []\n    };\n  }\n\n  toDataFromFile(file, cb) {\n    let reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = function () {\n      cb(reader.result);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Please insert an URL of picture and wait for the result\"), React.createElement(\"div\", {\n      className: \"form-URL\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: e => this.predictImage(e),\n      name: \"image\",\n      type: \"text\",\n      className: \"form-control\",\n      id: \"exampleInputEmail1\",\n      \"aria-describedby\": \"\",\n      placeholder: \"Select URL\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Or insert a food picture that you have saved\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"add-picture\",\n      type: \"file\",\n      id: \"imageFile\",\n      name: \"imageFile\",\n      onChange: f => this.predictImageFile(f),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), this.state.names.slice(0, 5).map((name, key) => React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: \"text-light\",\n      to: \"/nutrition/\".concat(name.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, name.name))));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/Users/colin/Desktop/next/fitness-kaki-front-end/src/components/Upload.js"],"names":["React","Component","Link","Upload","constructor","props","toData","url","callback","xhr","XMLHttpRequest","onload","reader","FileReader","onloadend","result","readAsDataURL","response","open","responseType","send","predictImage","e","image","target","value","myBase64","setTimeout","console","log","split","Clarifai","require","app","App","apiKey","models","predict","FOOD_MODEL","base64","then","setState","names","outputs","data","concepts","catch","err","state","map","p","name","predictImageFile","f","imageFile","document","querySelector","files","toDataFromFile","file","cb","render","slice","key"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom'\nimport './Upload.css'\n\nclass Upload extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            image: null,\n            imageFile: null,\n            names: [],\n        };\n    }\n\n    toData = (url, callback) => {\n        const xhr = new XMLHttpRequest();\n        xhr.onload = () => {\n            const reader = new FileReader();\n            reader.onloadend = () => {\n                callback(reader.result);\n            };\n            reader.readAsDataURL(xhr.response);\n        };\n        xhr.open('GET', url);\n        xhr.responseType = 'blob';\n        xhr.send();\n    };\n\n    toDataFromFile(file, cb) {\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function () {\n            cb(reader.result)\n        };\n    };\n\n    predictImage = (e) => {\n        let image = '';\n        this.toData(e.target.value, (myBase64) => {\n            image = myBase64 // myBase64 is the base64 string\n        }\n        )\n\n\n        setTimeout(() => {\n            console.log(image.split(',')[1])\n            // Initialise Clarifai api\n            const Clarifai = require('clarifai');\n\n            const app = new Clarifai.App({\n                apiKey: '3136bd99f12649ddb3bbd963c2975804'\n            });\n\n            // Identify the image\n            app.models.predict(Clarifai.FOOD_MODEL, { base64: image.split(',')[1] })\n                .then((response) =>\n                    // console.log(response.outputs[0].data)\n                    this.setState({\n                        names: response.outputs[0].data.concepts\n                    })\n                )\n                .catch((err) => console.log(err))\n            this.state.names.map(p => (\n                console.log(p.name)\n            ))\n\n        }, 1000)\n    }\n\n    predictImageFile = (f) => {\n        let imageFile = document.querySelector(\"input[type=file]\").files[0];\n        this.toDataFromFile(imageFile, (myBase64) => {\n            imageFile = myBase64 // myBase64 is the base64 string\n        }\n        )\n\n\n        setTimeout(() => {\n            console.log(imageFile)\n            // console.log(imageFile.split(',')[1])\n            // Initialise Clarifai api\n            const Clarifai = require('clarifai');\n\n            const app = new Clarifai.App({\n                apiKey: '3136bd99f12649ddb3bbd963c2975804'\n            });\n\n            // Identify the image\n            app.models.predict(Clarifai.FOOD_MODEL, { base64: imageFile.split(',')[1] })\n                .then((response) =>\n                    // console.log(response.outputs[0].data)\n                    this.setState({\n                        names: response.outputs[0].data.concepts\n                    })\n                )\n                .catch((err) => console.log(err))\n            this.state.names.map(p => (\n                console.log(p.name)\n            ))\n\n        }, 1000)\n    }\n\n\n    render() {\n        return (\n            < div className=\"wrapper\" >\n                <form  >\n                    <h1 className=\"word\">Please insert an URL of picture and wait for the result</h1>\n                    <div className=\"form-URL\" >\n                        <input onChange={e => this.predictImage(e)} name=\"image\" type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"\" placeholder=\"Select URL\" />\n                    </div>\n                    <br></br>\n                    <h1 className=\"word\">Or insert a food picture that you have saved</h1>\n                    <br></br>\n                    <input className=\"add-picture\"\n                        type=\"file\"\n                        id=\"imageFile\"\n                        name='imageFile'\n                        onChange={f => this.predictImageFile(f)} />\n                </form>\n                {\n                    this.state.names.slice(0, 5).map((name, key) =>\n                        <b><Link className=\"text-light\" to={`/nutrition/${name.name}`}>{name.name}</Link></b>\n\n                    )\n                }\n            </div >\n        );\n    }\n}\n\n\nexport default Upload;"]},"metadata":{},"sourceType":"module"}